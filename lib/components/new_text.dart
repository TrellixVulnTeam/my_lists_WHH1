import 'package:flutter/material.dart';
import 'package:my_lists/constants.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:my_lists/models/models.dart';
import 'package:provider/provider.dart';

final db = FirebaseFirestore.instance;

String? title;
late String text;
bool isPrivate = false;
var userFamily;
var userEmail;

class NewText extends StatefulWidget {
  static const String id = 'new_list';

  @override
  _NewTextState createState() => _NewTextState();
}

class _NewTextState extends State<NewText> {
  TextEditingController _textEditingController = TextEditingController();

  @override
  void initState() {
    super.initState();
  }

  @override
  void dispose() {
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final userData = Provider.of<UserData>(context);
    return Center(
      child: Padding(
        padding: EdgeInsets.all(25.0),
        child: SingleChildScrollView(
          child: Card(
            color: kLightAccentColour,
            child: Column(
              //mainAxisSize: MainAxisSize.min,
              children: [
                Padding(
                  padding: const EdgeInsets.only(left: 20.0, top: 15.0),
                  child: TextField(
                    style: TextStyle(fontSize: 20.0),
                    decoration: InputDecoration(
                        hintText: 'Title', border: InputBorder.none),
                    onChanged: (value) {
                      title = value.trim();
                    },
                  ),
                ),
                Padding(
                  padding: const EdgeInsets.only(left: 20.0, right: 20.0),
                  child: TextField(
                    style: TextStyle(fontSize: 20.0),
                    decoration: InputDecoration(border: InputBorder.none),
                    controller: _textEditingController,
                    autofocus: true,
                    maxLines: null,
                  ),
                ),
                Row(
                  mainAxisAlignment: MainAxisAlignment.end,
                  children: [
                    Text(
                      'Private Note',
                      style: TextStyle(fontSize: 20.0),
                    ),
                    Checkbox(
                        value: isPrivate,
                        onChanged: (value) {
                          setState(() {
                            isPrivate = value!;
                          });
                        })
                  ],
                ),
                Row(
                  mainAxisAlignment: MainAxisAlignment.end,
                  children: [
                    TextButton(
                      child: Text(
                        'Cancel',
                        style: TextStyle(
                            color: kPrimaryTextColour, fontSize: 25.0),
                      ),
                      onPressed: () {
                        title = null;
                        Navigator.pop(context);
                      },
                    ),
                    Padding(
                      padding: const EdgeInsets.only(right: 15.0),
                      child: TextButton(
                          child: Text(
                            'Create Note',
                            style: TextStyle(
                                color: kPrimaryTextColour, fontSize: 25.0),
                          ),
                          onPressed: () {
                            text = _textEditingController.text;

                            title == null ? title = 'Untitled' : title = title;
                            userFamily = userData.family;
                            userEmail = userData.email;
                            createNote(title);
                            title = null;
                            Navigator.of(context).pop();
                          }),
                    ),
                  ],
                ),
                Padding(
                  padding: EdgeInsets.only(
                      bottom: MediaQuery.of(context).viewInsets.bottom),
                  child: SizedBox(height: 10.0),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  void createNote(title) {
    DocumentReference docs =
        db.collection('families').doc(userFamily).collection('docs').doc();

    Future<void> creatingNote() async {
      // Create the new document with autogenerated ID
      var tempNewDoc = docs;

      // Use ID created above to set the data in the document
      var newDoc = await docs
          .set({
            'title': title,
            'body': text,
            'created_at': FieldValue.serverTimestamp(),
            'created_by': userEmail,
            'type': 'note',
            'isPrivate': isPrivate,
            'id': tempNewDoc.id,
            'isFav': false,
          })
          .then((value) => print("Note Added with title: $title"))
          .catchError((error) => print("Failed to add note: $error"));

      return newDoc;
    }

    creatingNote();
  }
}
